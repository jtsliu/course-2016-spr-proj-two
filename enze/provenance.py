import urllib.request
import json
import dml
import prov.model
import datetime
import uuid

Set up the database connection.
client = dml.pymongo.MongoClient()
repo = client.repo
repo.authenticate('enze', 'enze')

# Retrieve some data sets (not using the API here for the sake of simplicity).
startTime = datetime.datetime.now()

endTime = datetime.datetime.now()

# Create the provenance document describing everything happening
# in this script. Each run of the script will generate a new
# document describing that invocation event. This information
# can then be used on subsequent runs to determine dependencies
# and "replay" everything. The old documents will also act as a
# log.
doc = prov.model.ProvDocument()
doc.add_namespace('alg', 'https://github.com/andrewenze/course-2016-spr-proj-one/enze/Script/analysis_script.py') # The scripts in <folder>/<filename> format.
doc.add_namespace('dat', 'https://github.com/andrewenze/course-2016-spr-proj-one/enze/Dataset') # The data sets in <user>/<collection> format.
doc.add_namespace('log', 'https://github.com/andrewenze/course-2016-spr-proj-two/tree/master/enze') # The event log.
doc.add_namespace('plt', 'https://github.com/andrewenze/course-2016-spr-proj-two/Plot') # The plots generated by the algorithm
doc.add_namespace('ont', 'https://github.com/andrewenze/course-2016-spr-proj-one/enze/ontology#') # 'Extension', 'DataResource', 'DataSet', 'Retrieval', 'Query', or 'Computation'.
doc.add_namespace('bos', 'https://mapzen.com/data/metro-extracts/#boston-massachusetts') # Boston Map Database
doc.add_namespace('bbl', 'http://bostonopendata.boston.opendata.arcgis.com/datasets?q=bike') # Boston Existing Bike Lane Database
doc.add_namespace('bbc', 'https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/24713') # Boston Bicycle Collisions Database

initial_script = doc.agent('alg:provenance.py', {prov.model.PROV_TYPE:prov.model.PROV['SoftwareAgent'], 'ont:Extension':'py'})

resource_bos = doc.entity('dat:Boston_Segments.csv', {'prov:label':'Boston_Segments.csv', prov.model.PROV_TYPE:'ont:DataResource', 'ont:Extension':'csv'})
resource_bbl = doc.entity('dat:Existing_Bike_Network.csv', {'prov:label':'Existing_Bike_Network.csv', prov.model.PROV_TYPE:'ont:DataResource', 'ont:Extension':'csv'})
resource_bbc = doc.entity('dat:Final Bike Collision Database.xlsx', {'prov:label':'Final Bike Collision Database.xlsx', prov.model.PROV_TYPE:'ont:DataResource', 'ont:Extension':'xlsx'})

get_intersection = doc.activity('log:a'+str(uuid.uuid4()), startTime, endTime, {prov.model.PROV_TYPE:'ont:Retrieval', 'ont:Computation':'inference'})
doc.wasAssociatedWith(get_intersection, initial_script)
doc.used(get_intersection, resource_bos, startTime)
doc.used(get_intersection, resource_bbl, startTime)

get_intersection_lane = doc.activity('log:a'+str(uuid.uuid4()), startTime, endTime, {prov.model.PROV_TYPE:'ont:Retrieval', 'ont:Computation':'inference'})
doc.wasAssociatedWith(get_intersection_lane, initial_script)
doc.used(get_intersection_lane, resource_bos, startTime)
doc.used(get_intersection_lane, resource_bbl, startTime)

get_plot = doc.activity('log:a'+str(uuid.uuid4()), startTime, endTime, {prov.model.PROV_TYPE:'ont:Retrieval', 'ont:Computation':'statistical analysis'})
doc.wasAssociatedWith(get_plot, initial_script)
doc.used(get_plot, resource_bos, startTime)
doc.used(get_plot, resource_bbl, startTime)
doc.used(get_plot, resource_bbc, startTime)

intersection = doc.entity('dat:intersection.csv', {prov.model.PROV_LABEL:'intersection.csv', prov.model.PROV_TYPE:'ont:DataSet','ont:Extension':'csv'})
# intersection = doc.entity('dat:intersection.csv', {'prov:label':'intersection.csv', prov.model.PROV_TYPE:'ont:DataSet','ont:Extension':'csv'})

doc.wasAttributedTo(intersection, initial_script)
doc.wasGeneratedBy(intersection, get_intersection, endTime)
doc.wasDerivedFrom(intersection, resource_bbc, resource_bos)
# doc.wasDerivedFrom(intersection, resource_bos, resource_liquor)

intersection_lane = doc.entity('dat:intersection_lane.csv', {prov.model.PROV_LABEL:'intersection_lane.csv', prov.model.PROV_TYPE:'ont:DataSet','ont:Extension':'csv'})
doc.wasAttributedTo(intersection_lane, initial_script)
doc.wasGeneratedBy(intersection_lane, get_intersection_lane, endTime)
doc.wasDerivedFrom(intersection_lane, resource_bos, resource_bbl, resource_bbc)
# doc.wasDerivedFrom(intersection_lane, resource_bbl, resource_liquor)
# doc.wasDerivedFrom(intersection_lane, resource_bbc, resource_liquor)

repo.record(doc.serialize()) # Record the provenance document.
#print(json.dumps(json.loads(doc.serialize()), indent=4))
open('plan.json','w').write(json.dumps(json.loads(doc.serialize()), indent=4))
print(doc.get_provn())
repo.logout()

## eof
